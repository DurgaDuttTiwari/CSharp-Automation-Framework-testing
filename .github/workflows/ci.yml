name: CI Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: 🧾 Checkout Repository
        uses: actions/checkout@v3

      - name: 🧰 Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: 🔧 Install Google Chrome + ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip gnupg
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          CHROME_VERSION=$(google-chrome --version | grep -oP "\d+\.\d+\.\d+\.\d+")
          DRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json" | jq -r --arg ver "$CHROME_VERSION" '.channels.Stable.downloads.chromedriver[] | select(.platform == "linux64") | .url')
          wget -O chromedriver.zip "$DRIVER_VERSION"
          unzip chromedriver.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          chmod +x /usr/local/bin/chromedriver

      - name: 🔍 Confirm Chrome & ChromeDriver Installed
        run: |
          google-chrome --version
          chromedriver --version

      # - name: 🧱 Install required dependencies for Chrome
      #   run: |
      #       sudo apt-get update
      #       sudo apt-get install -y \
      #       libnss3 \
      #       libxss1 \
      #       libasound2 \
      #       libatk-bridge2.0-0 \
      #       libgtk-3-0 \
      #       libdrm2 \
      #       libgbm1

      - name: 🧪 Restore Dependencies
        run: dotnet restore

      - name: 🛠️ Build Project
        run: dotnet build --no-restore --configuration Release

      - name: 🧪 Run Tests with Reqnroll + NUnit
        run: dotnet test --no-build --configuration Release --logger "trx;LogFileName=test-results.trx"

      - name: 📤 Upload HTML Report (including screenshots)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: HTML-Test-Report
          path: '**/Reports/**'

      - name: 📤 Upload TRX Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: NUnit-TRX-Results
          path: '**/TestResults/*.trx'